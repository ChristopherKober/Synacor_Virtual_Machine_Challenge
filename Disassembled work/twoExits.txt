01787:      9 32768 32768     1 |    add    r0    r0     1	# r0 = r0 + 1
01791:      5 32771 32768 32770 |     gt    r3    r0    r2	#
01795:      7 32771  1816       |     jt    r3  1816		# jmp if r0 > r2
01798:     20 32772             |     in    r4				# START: get char 32 character limit
01800:      4 32771 32772    10 |     eq    r3    r4    10	#
01804:      7 32771  1816       |     jt    r3  1816		# if you don't enter a character, jump
01807:     16 32768 32772       |   wmem    r0    r4		# write character entered into r0
01810:      9 32773 32773     1 |    add    r5    r5     1	# r5 = r5 + 1
01814:      6  1787             |    jmp  1787				#
01816:     16 32769 32773       |   wmem    r1    r5		# write r5 into r1
01819:      4 32771 32772    10 |     eq    r3    r4    10	# 
01823:      7 32771  1830       |     jt    r3  1830		# jmp if no character entered
01826:     20 32772             |     in    r4				# get character
01828:      6  1819             |    jmp  1819				#
01830:      3 32773             |    pop    r5				#
01832:      3 32772             |    pop    r4				#
01834:      3 32771             |    pop    r3				#
01836:      3 32770             |    pop    r2				#
01838:      3 32768             |    pop    r0				#
01840:     18                   |    ret					#
01841:      2 32771             |   push    r3				#
01843:      2 32772             |   push    r4				#
01845:      2 32773             |   push    r5				#
01847:      2 32774             |   push    r6				#


r0:  25975
r1:  25974
r2:  26006
r3:      0
r4:     49
r5:      0
r6:      0
r7:      0

stack:
     0:      0 -
     1:    101 -
     2:      1 -
     3:   6124 -
     4:     32 -
     5:   2826 
     6:      1
     7:   6124
     8:     16
     9:   6080
     
     
write the string to memory starting at 25975
r5 and mem address 25974 contains the length of the string






02826:     19    10             |    out    10				# enter
02828:     19    10             |    out    10				# enter
02830:      1 32768 25974       |    set    r0 25974		# r0 = mem address of length
02833:      1 32769    32       |    set    r1    32		# r1 = max length of string
02836:     17  1571             |   call  1571				# 
02838:      4 32769 32768 32767 |     eq    r1    r0 32767	# 
02842:      8 32769  2848       |     jf    r1  2848		# jump if there is a space in input string
02845:     15 32768 25974       |   rmem    r0 25974		#
02848:      1 32770 32768       |    set    r2    r0		# r2 = length of first word
02851:     15 32769 25974       |   rmem    r1 25974		#
02854:      2 32769             |   push    r1				#
02856:     16 25974 32770       |   wmem 25974    r2		# rewriting length value to be just first word
02859:      1 32768 27398       |    set    r0 27398		#
02862:      1 32769 25974       |    set    r1 25974		#
02865:     17  1588             |   call  1588				# 
02867:      3 32769             |    pop    r1				# putting length of first word back into r1
02869:     16 25974 32769       |   wmem 25974    r1		#
02872:      4 32769 32768 32767 |     eq    r1    r0 32767	#
02876:      8 32769  2885       |     jf    r1  2885		#
02879:      1 32768     0       |    set    r0     0		#
02882:      1 32770     0       |    set    r2     0		#
02885:      9 32769 27406     1 |    add    r1 27406     1	#
02889:      9 32769 32769 32768 |    add    r1    r1    r0	#
02893:     15 32769 32769       |   rmem    r1    r1		#
02896:     15 32771 25974       |   rmem    r3 25974		#
02899:      4 32771 32771 32770 |     eq    r3    r3    r2	#
02903:      7 32771  2944       |     jt    r3  2944		#
02906:     10 32768 32770 32767 |   mult    r0    r2 32767	#
02910:     15 32771 25974       |   rmem    r3 25974		#
02913:      9 32771 32768 32771 |    add    r3    r0    r3	#
02917:      8 32770  2924       |     jf    r2  2924		#
02920:      9 32771 32771 32767 |    add    r3    r3 32767	#
02924:     11 32771 32771    32 |    mod    r3    r3    32	#
02928:      9 32768 25974 32770 |    add    r0 25974    r2	#
02932:      8 32770  2939       |     jf    r2  2939		#
02935:      9 32768 32768     1 |    add    r0    r0     1	#
02939:     16 32768 32771       |   wmem    r0    r3		#
02942:      6  2950             |    jmp  2950				#
02944:      1 32768 25974       |    set    r0 25974		#
02947:     16 32768     0       |   wmem    r0     0		#
02950:     17 32769             |   call    r1				#
02952:      7 32769  2742       |     jt    r1  2742		#
02955:      3 32771             |    pop    r3				#
02957:      3 32770             |    pop    r2				#
02959:      3 32769             |    pop    r1				#
02961:      3 32768             |    pop    r0				#
02963:     18                   |    ret					#


string "abcd ef":
r0:      4
r1:     32
r2:   6124
r3:      1
r4:    101
r5:      0
r6:      0
r7:      0

string "two three":
r0:      3 -> location of first space
r1:     32 -> max length of string
r2:   6124
r3:      1
r4:    101 -> space ascii
r5:      0
r6:      0
r7:      0

string "abcdefghijklmnopqrstuvwxyz 1234":
r0:     26
r1:     32
r2:   6124
r3:      1
r4:    101
r5:      0
r6:      0
r7:      0

string "helloworld":
r0:  32767
r1:     32
r2:   6124
r3:      1
r4:    101
r5:      0
r6:      0
r7:      0



01571:      2 32769             |   push    r1				#
01573:      2 32770             |   push    r2				#
01575:      1 32770 32769       |    set    r2    r1		#
01578:      1 32769  1605       |    set    r1  1605		#
01581:     17  1543             |   call  1543				#
01583:      3 32770             |    pop    r2				#
01585:      3 32769             |    pop    r1				#
01587:     18                   |    ret					#

r2 is 25974 (len of string)
r1 is 1605

01543:      2 32769             |   push    r1				#
01545:      2 32771             |   push    r3				#
01547:     15 32771 32768       |   rmem    r3    r0		# first character into r3
01550:      8 32771  1563       |     jf    r3  1563		# jump to 1563 if character null
01553:     17  1458             |   call  1458				#
01555:      7 32769  1563       |     jt    r1  1563		# 
01558:      1 32768 32770       |    set    r0    r2		# r0 = pos first space
01561:      6  1566             |    jmp  1566				# 
01563:      1 32768 32767       |    set    r0 32767		#
01566:      3 32771             |    pop    r3				#
01568:      3 32769             |    pop    r1				#
01570:     18                   |    ret					# 

01458:      2 32768             |   push    r0				#
01460:      2 32771             |   push    r3				#
01462:      2 32772             |   push    r4				#
01464:      2 32773             |   push    r5				#
01466:      2 32774             |   push    r6				#
01468:      1 32774 32768       |    set    r6    r0		# r6 = mem address of length
01471:      1 32773 32769       |    set    r5    r1		# r5 = mem address of string
01474:     15 32772 32768       |   rmem    r4    r0		# r4 = length value
01477:      1 32769     0       |    set    r1     0		# r1 = 0
01480:      9 32771     1 32769 |    add    r3     1    r1	# r3 = 1
01484:      5 32768 32771 32772 |     gt    r0    r3    r4	# 
01488:      7 32768  1507       |     jt    r0  1507		# jump if length is zero
01491:      9 32771 32771 32774 |    add    r3    r3    r6	# 
01495:     15 32768 32771       |   rmem    r0    r3		# 
01498:     17 32773             |   call    r5				# call 1605
01500:      9 32769 32769     1 |    add    r1    r1     1	#
01504:      7 32769  1480       |     jt    r1  1480		# waits until there is a space
01507:      3 32774             |    pop    r6				#
01509:      3 32773             |    pop    r5				#
01511:      3 32772             |    pop    r4				#
01513:      3 32771             |    pop    r3				#
01515:      3 32768             |    pop    r0				#
01517:     18                   |    ret					#


01605:      4 32768 32768 32770 |     eq    r0    r0    r2 	# 
01609:      8 32768  1618       |     jf    r0  1618		#
01612:      1 32770 32769       |    set    r2    r1		# if r0 != r2 r2 = r1
01615:      1 32769 32767       |    set    r1 32767		# r1 = 32767 (MAX_INT)
01618:     18                   |    ret					#


string " ":
r0:  25974
r1:      0
r2:      0 - position of first space
r3:      1 - len of string
r4:    101
r5:      0
r6:      0
r7:      0

string "r ":
r1:      0
r2:      1
r3:      2
r4:    101
r5:      0
r6:      0
r7:      0

string "qwe rty":
r0:  25974
r1:      0
r2:      3
r3:      7
r4:    101
r5:      0
r6:      0
r7:      0

string "qwe rty uio":
r0:  25974
r1:      0
r2:      3
r3:     11
r4:    101
r5:      0
r6:      0
r7:      0


starting register:
r0:  27398
r1:  25974 -> address of length
r2:     26 -> len of first word
r3:      1
r4:    101 -> space ascii
r5:      0
r6:      0
r7:      0

r0:  32767
r1:  25974
r2:     26
r3:      1
r4:    101
r5:      0
r6:      0
r7:      0

01588:      2 32769             |   push    r1
01590:      2 32770             |   push    r2
01592:      1 32770 32769       |    set    r2    r1
01595:      1 32769  1648       |    set    r1  1648
01598:     17  1543             |   call  1543
01600:      3 32770             |    pop    r2
01602:      3 32769             |    pop    r1
01604:     18                   |    ret

01543:      2 32769             |   push    r1
01545:      2 32771             |   push    r3
01547:     15 32771 32768       |   rmem    r3    r0
01550:      8 32771  1563       |     jf    r3  1563
01553:     17  1458             |   call  1458
01555:      7 32769  1563       |     jt    r1  1563
01558:      1 32768 32770       |    set    r0    r2
01561:      6  1566             |    jmp  1566
01563:      1 32768 32767       |    set    r0 32767
01566:      3 32771             |    pop    r3
01568:      3 32769             |    pop    r1
01570:     18                   |    ret

01458:      2 32768             |   push    r0					#finds the length of the first word splitting on specified ascii character
01460:      2 32771             |   push    r3
01462:      2 32772             |   push    r4
01464:      2 32773             |   push    r5
01466:      2 32774             |   push    r6
01468:      1 32774 32768       |    set    r6    r0
01471:      1 32773 32769       |    set    r5    r1
01474:     15 32772 32768       |   rmem    r4    r0
01477:      1 32769     0       |    set    r1     0
01480:      9 32771     1 32769 |    add    r3     1    r1
01484:      5 32768 32771 32772 |     gt    r0    r3    r4
01488:      7 32768  1507       |     jt    r0  1507
01491:      9 32771 32771 32774 |    add    r3    r3    r6
01495:     15 32768 32771       |   rmem    r0    r3
01498:     17 32773             |   call    r5
01500:      9 32769 32769     1 |    add    r1    r1     1
01504:      7 32769  1480       |     jt    r1  1480
01507:      3 32774             |    pop    r6
01509:      3 32773             |    pop    r5
01511:      3 32772             |    pop    r4
01513:      3 32771             |    pop    r3
01515:      3 32768             |    pop    r0
01517:     18                   |    ret